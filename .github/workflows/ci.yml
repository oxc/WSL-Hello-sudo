name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-pam-module:
    name: 'Build PAM module'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        override: true

    - name: Install libpam
      run: sudo apt-get install libpam0g-dev

    - name: Build
      run: make clean build/pam_wsl_hello.so

    - uses: actions/upload-artifact@v2
      name: Upload artifact
      with:
        name: 'PAM module'
        path: build/pam_wsl_hello.so
        if-no-files-found: error

  build-windows-binaries:
    name: 'Build Windows binaries'

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Build
      run: make clean all
      working-directory: win_components

    - uses: actions/upload-artifact@v2
      name: Upload artifacts
      with:
        name: 'Windows Binaries'
        path: win_components/build/
        if-no-files-found: error

  release:
    name: 'Release'

    if: ${{ github.event_name == 'push' }}

    runs-on: ubuntu-latest

    needs: [build-pam-module, build-windows-binaries]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: 'Windows Binaries'
        path: build

    - uses: actions/download-artifact@v2
      with:
        name: 'PAM module'
        path: build

    - name: Conventional Changelog Action
      id: changelog
      uses: TriPSs/conventional-changelog-action@v3
      with:
        github-token: ${{ secrets.github_token }}
        version-file: Cargo.toml
        version-path: package.version

    - run: make -d release

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: ${{ steps.changelog.outputs.skipped == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag }}
        release_name: ${{ steps.changelog.outputs.tag }}
        body: ${{ steps.changelog.outputs.clean_changelog }}

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      if: ${{ steps.changelog.outputs.skipped == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release.tar.gz
        asset_name: WSL-Hello-sudo-${{ steps.changelog.outputs.tag }}.tar.gz
        asset_content_type: application/gzip

